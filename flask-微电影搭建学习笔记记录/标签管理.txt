标签管理

功能分为 添加标签，标签列表，删除标签，修改标签

首先添加标签

创建一个forms TagForm 定义name 和submit 两个

基本跟上面LoginForm差不多

然后在tag_add中部署表单基本差不多 加入了 一个添加成功的flash  
对使用flash有了一个新的了解
        flash('添加标签成功', 'ok')
操作成功后面，加一个‘ok’
｛% for msg in get_flashed_messages(category_filter=["ok"]) %}
   <div class="alert alert-success alert-dismissible">
       <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×
   </button>
  <h4><i class="icon fa fa-check"></i> 操作成功！</h4>
   添加标签成功
  </div>
{% endfor %}

这里使用到get_flashed_messages()方法  加入参数category_filter=[‘ok’]
这是一个操作成功的的效果 还有一个操作失败的  两个的颜色不用

然后就是验证表单，
    if form.validate_on_submit():
        data = form.data
        tag = Tag.query.filter_by(name=data['name']).count() #检验输入的标签名是否存在
        if tag == 1:
            flash("名称已经存在", 'err')
            return redirect(url_for('admin.tag_add'))
        tag = Tag(
            name=data['name'],
        )                            #如果不存在就使用Tag 给name赋值  然后提交
        db.session.add(tag)
        db.session.commit()
        flash('添加标签成功', 'ok')
        return redirect(url_for('admin.tag_add'))

然后 标签列表  既然是列表肯定要分页显示了
首先给tag_list 传入参数page=None 默认值
    if page is None:  #如果page是空的
        page = 1      #赋值为1
    page_data = Tag.query.order_by(
        Tag.addtime.desc()
    ).paginate(page=page, per_page=10)   #然后在Tag中搜索Tag.addtime.desc() 以时间顺序返回
					#这里的paginate就是分页的函数（输入page页数，per_page等于每页显示的内容条数）
    return render_template("admin/tag_list.html", page_data=page_data)

已经定义好了 如何在tag_list.html 中显示出来呢

根据文档显示  需要使用macro  定义一个宏

基本就是{% macro page(data,url) -%}
传入数据和url地址
然后用到的有 {{ url_for(url,page=1) }} 基本就是这样的格式，这是定义首页的
{{ url_for(url,page=data.pages) }}定义尾页的
如果有上一页  使用has_prev  如果没有就给上一页加一个disabled禁止效果
如果有下一页  使用has_next
然后就是遍历 中间的页数
利用for循环
            {% for v in data.iter_pages() %}  #遍历
加效果 利用if 语句 如果 v == data.page  当前页面 就加上一个active 激活效果
else  就是没有的

分页搞定了 现在就是在tag_list中遍历标签了 
{% for v in page_data.items %}  page_data就是从tag_list函数中传过来的 就是从Tag中搜索到的数据每页十个

然后开始标签删除 
标签 应该很简单 就是 搜索到此id 进行删除
因为每个标签都有一个唯一的id 
所以在tag_del中传入一个id 参数
    tag = Tag.query.filter_by(id=id).first_or_404()   #从表中搜索  如果没有就返回一个404页面
    db.session.delete(tag)               #如果有 就删除他
    db.session.commit()
    flash('删除标签成功', 'ok')          #这里也有一个flash效果  
    return redirect(url_for('admin.tag_list', page=1))  #成功后给他重定向到标签列表，记得给一个page参数

然后就是编辑标签
还是把标签的唯一id拿出来
进行搜索 如果没有 就404
form = TagForm()
    tag = Tag.query.get_or_404(id)  #如果是get 请求就返回到tag_edit编辑页面 跟tag_add页面一样
    if form.validate_on_submit():   #post请求 
        data = form.data
        tag_count = Tag.query.filter_by(name=data['name']).count()  #先查询修改后的名次在表中出现的次数 
        if tag.name != data['name'] and tag_count == 1:   #修改后的名字是否表中已经存在  同时还要看修改的名字和现在名字不能相同  
            flash("名称已经存在", 'err') #错误就falsh
            return redirect(url_for('admin.tag_edit',id=id))
        tag.name=data['name'] 
        db.session.add(tag)
        db.session.commit()
        flash('修改标签成功', 'ok')
        return redirect(url_for('admin.tag_edit',id=id))
    return render_template("admin/tag_edit.html", form=form,tag=tag)

这里edit页面 修改为 {{ form.name(value=tag.name) }}
这样 在修改的时候就会显示 原来的名字 方便修改

提交按钮的 {{ form.csrf_token }} 可不能忘了


